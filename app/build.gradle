apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

ext.abiCodes = ["armeabi-v7a": 1, "arm64-v8a": 2, "x86":3, "x86_64":4]

repositories {
    maven {
        url 'https://leiainc.jfrog.io/leiainc/gradle-release'
    }
}

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Check if keystore.properties file exists, create it if not.
if (!keystorePropertiesFile.exists()) {
    try {
        keystorePropertiesFile.createNewFile()
        println 'Created new keystore.properties file.'
    } catch (IOException e) {
        println 'Warning: Failed to create keystore.properties file.'
    }
}

// Load your keystore.properties file into the keystoreProperties object.
if (keystorePropertiesFile.exists()) {
    try {
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    } catch (IOException e) {
        println 'Warning: Failed to load keystore.properties file.'
    }
}

android {
    namespace 'is.xyz.mpv'
    compileSdkVersion 33

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    defaultConfig {
        buildToolsVersion "31.0.0"
        minSdkVersion 30
        targetSdkVersion 31
        versionCode 31
        versionName "2023-05-06-release"
        vectorDrawables.useSupportLibrary = true

        ndk.abiFilters = ["arm64-v8a"]
    }

    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.debug
        }
    }
    sourceSets{
        main {
            jniLibs.srcDirs = [
                    'src/main/libs',
                    './../distribution/leia_sdk/lib'
            ]
            java.srcDirs = ['src']
        }
    }

    flavorDimensions "default"
    productFlavors {
        "default" {
            isDefault true
        }
    }

    buildFeatures {
        viewBinding = true
    }

    splits {
        abi {
            enable true
            reset()
            // include only the ABIs that were actually built
            project.ext.abiCodes.each { abi, _ ->
                if (new File(project.projectDir, "src/main/jniLibs/${abi}").exists())
                    include(abi)
            }
            universalApk true // build an APK with all ABIs too
        }
    }
}

// Map versionCode so each ABI gets a different one
// e.g. x86 with version 21 gets a versionCode of 3021
import com.android.build.VariantOutput
android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def base = project.ext.abiCodes.get(output.getFilter(VariantOutput.ABI))
        // universal APK keeps the original versionCode
        if (base != null)
            output.versionCodeOverride = base * 1000 + variant.versionCode
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.6.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    implementation files("../leia-cnsdk/cnsdk.aar")
    implementation 'androidx.media:media:1.6.0'
}
